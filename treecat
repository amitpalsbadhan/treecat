#!/usr/bin/env bash
#
# treecat — recursively cat every file (or specific files), naming each in a Markdown code block.
#
# Usage:
#   treecat [ -r ] [ -e PATTERN… ] [ -I PATTERN… ] [FILE|DIR]…
#   treecat -h | --help
#   treecat --version
#
# By default, only the files/dirs you list are processed non-recursively.
# Use -r/--recursive to descend into directories.
# You may pass multiple -e/--exclude or -I/--include options, each taking one or more patterns.
#
set -euo pipefail

VERSION="1.0.1"

print_help() {
  cat <<EOF
Usage: treecat [ -r ] [ -e PATTERN… ] [ -I PATTERN… ] [FILE|DIR]…
Options:
  -r, --recursive            Recurse into directories
  -e, --exclude PATTERN …    Exclude files matching any of these glob patterns
  -I, --include PATTERN …    Only include files matching at least one of these glob patterns
  -h, --help                 Show this help and exit
      --version              Show version and exit

Examples:
  treecat file.txt src/                # non-recursive
  treecat -r src/                      # recursive
  treecat -r -e '*.md' -e '*.png' src/ # recursive, skipping markdown & images
  treecat -I '*.sh' -I '*.cpp' .       # only show .sh & .cpp files
EOF
}

# parse options
recursive=false
declare -a excludes=()
declare -a includes=()
args=()

while (( $# )); do
  case "$1" in
    -r|--recursive)
      recursive=true
      shift
      ;;
    -e|--exclude)
      shift
      while [[ $# -gt 0 && ! "$1" =~ ^- ]]; do
        excludes+=("$1")
        shift
      done
      ;;
    -I|--include)
      shift
      while [[ $# -gt 0 && ! "$1" =~ ^- ]]; do
        includes+=("$1")
        shift
      done
      ;;
    -h|--help)
      print_help
      exit 0
      ;;
    --version)
      echo "treecat $VERSION"
      exit 0
      ;;
    --) # end of options
      shift
      break
      ;;
    -*)
      echo "treecat: unknown option '$1'" >&2
      print_help >&2
      exit 1
      ;;
    *)
      args+=("$1")
      shift
      ;;
  esac
done

# default target is current directory if none provided
if [[ ${#args[@]} -eq 0 ]]; then
  args=(.)
fi

# build find arguments
find_args=()
if ! $recursive; then
  find_args+=( -maxdepth 1 )
fi
find_args+=( -type f )

# helper to test include/exclude
should_skip() {
  local file="$1"
  # exclude wins over include
  for pat in "${excludes[@]}"; do
    [[ "$(basename "$file")" == $pat ]] && return 0
  done
  if [[ ${#includes[@]} -gt 0 ]]; then
    for pat in "${includes[@]}"; do
      [[ "$(basename "$file")" == $pat ]] && return 1
    done
    return 0
  fi
  return 1
}

process_file() {
  local f="$1"
  local rel="${f#./}"
  if should_skip "$rel"; then
    return
  fi
  # skip binary files
  if ! grep -Iq . "$f"; then
    echo "File Name: $rel: (binary skipped)"
    echo
    return
  fi

  echo "File Name: $rel:"
  echo '```'
  cat "$f"
  echo '```'
  echo
}

# iterate targets
for target in "${args[@]}"; do
  if [[ -f "$target" ]]; then
    process_file "$target"

  elif [[ -d "$target" ]]; then
    # recurse or not
    find_opts=("${find_args[@]}" )
    # prepend global options before tests
    if $recursive; then
      find_opts=( "${find_opts[@]}" )
    else
      find_opts=( "${find_opts[@]}" )
    fi

    find "$target" "${find_opts[@]}" -print0 \
      | sort -z \
      | while IFS= read -r -d '' file; do
          process_file "$file"
        done

  else
    printf 'treecat: skipping non-file/non-dir %s\n' "$target" >&2
  fi
done

